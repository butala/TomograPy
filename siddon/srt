#!/usr/bin/env python

"""
Performs Solar Rotational Tomography from the command line.
"""
from models import srt, stsrt, thomson

def usage():
    print(__usage__)

__usage__ = """Usage: srt [options] path [output]

Options:

  -h --help          Show this help message and exit.
  --config           Config file name (default: srt_default.cfg).
                     Command line options overloads config file options.

  Data parameters:

  -b --bin           Bin factor of images.
  -s --time_step     Time step between two images of the same kind.
  -w --time_window   Time window in which to look for data.
  -i --instrument    Instrument name(s).
  -t --telescop      Telescps name(s).

  Object parameters:

  --naxis            Object shape in pixels.
  --crpix            Position of the reference pixel in fraction of pixels.
  --cdelt            Size of a pixel in physical coordinates.
  --crval            Position of the reference pixel in physical coordinates.

  Masking parameters:

  --obj_rmin
  --obj_rmax
  --data_rmin
  --data_rmax
  -n --negative      Mask negative data values.

  Optimization options:

  --model            Linear model to use for the inversion.
  --optimizer        Name of optimization routine (from lo).
  --hyperparameters  Hyperparameters of the smoothness prior.
  --maxiter          Maximum iteration number.
  --tol              Tolerance.
  --dt_min           Minimal time under which projection are considered 
                     simultaneous.

  Other options

  --input            Optional input filename for starting point.
  --output           Output filename (default: srt.fts).

"""

options = "hb:s:w:i:o:d:n"

long_options = ["help", "config=", "bin=", "time_step=", "time_window=",
                "instrument=", "telescop=",
                "naxis=", "crpix=", "cdelt=", "crval=",
                "obj_rmin=", "obj_rmax=", "data_rmin=", "data_rmax=",
                "negative",
                "model=", "optimizer=", "hyperparameters=", "maxiter=", "tol=",
                "dt_min=",
                "input=", "output="]

model_dict = {"srt":srt, "stsrt":stsrt, "thomson":thomson}

def main():
    """Handle config file, options and perform computations accordingly."""
    import os, getopt, sys, ConfigParser
    import lo, siddon
    import fitsarray as fa
    import solar, models

    # parse command line arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], options, long_options)
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    # defaults
    script_path = sys.path[0]
    config_file = os.path.join(script_path, "srt_default.cfg")
    data_params = dict()
    mask_params = dict()
    opt_params = dict()
    mask_negative = False
    output = "srt.fts"
    # parse config file
    for o, a in opts:
        if o == "--config":
            config_file = a
    config = ConfigParser.RawConfigParser()
    config.read(config_file)
    data_params["instrume"] = parse_tuple(config.get("data", "instrument"))
    data_params["telescop"] = parse_tuple(config.get("data", "telescop"))
    data_params["bin_factor"] = config.getint("data", "bin")
    data_params["time_step"] = config.getfloat("data", "time_step")
    data_params["time_window"] = parse_tuple(config.get("data", "time_window"))
    naxis = parse_tuple_int(config.get("object", "naxis"))
    crpix = parse_tuple_float(config.get("object", "crpix"))
    cdelt = parse_tuple_float(config.get("object", "cdelt"))
    crval = parse_tuple_float(config.get("object", "crval"))
    mask_params["obj_rmin"] = config.getfloat("masking", "obj_rmin")
    mask_params["obj_rmax"] = config.getfloat("masking", "obj_rmax")
    mask_params["data_rmin"] = config.getfloat("masking", "data_rmin")
    mask_params["data_rmax"] = config.getfloat("masking", "data_rmax")
    mask_params["mask_negative"] = config.getboolean("masking", "negative")
    opt_params["model"] = model_dict[config.get("optimization", "model")]
    opt_params["optimizer"] = config.get("optimization", "optimizer")
    opt_params["hypers"] = parse_tuple_float(config.get("optimization", "hyperparameters"))
    opt_params["maxiter"] = config.getint("optimization", "maxiter")
    opt_params["tol"] = config.getfloat("optimization", "tol")
    try:
        opt_params["dt_min"] = config.getfloat("optimization", "dt_min")
    except(ConfigParser.NoOptionError):
        opt_params["dt_min"] = data_params["time_step"] / 2.
    # parse arguments
    if len(args) == 0:
        usage()
        sys.exit()
    path = args[0]
    if len(args) > 1:
        output = args[1]
    # parse options
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        # data parameters
        elif o in ("-b", "--bin"):
            data_params["bin_factor"] = int(a)
        elif o in ("-s", "--time_step"):
            data_params["time_step"] = float(a)
        elif o in ("-w", "--time_window"):
            data_params["time_window"] = parse_tuple(a)
        elif o in ("-i", "--instrument"):
            data_params["instrume"] = parse_tuple(a)
        elif o in ("-t", "--telescop"):
            data_params["telescop"] = parse_tuple(a)
        # object parameters
        elif o == "--naxis":
            naxis = parse_tuple_int(a)
        elif o == "--crpix":
            crpix = parse_tuple_float(a)
        elif o == "--cdelt":
            cdelt = parse_tuple_float(a)
        elif o == "--crval":
            crval = parse_tuple_float(a)
        # masking parameters
        elif o == "--obj_rmin":
            mask_params["obj_rmin"] = float(a)
        elif o == "--obj_rmax":
            mask_params["obj_rmax"] = float(a)
        elif o == "--data_rmin":
            mask_params["data_rmin"] = float(a)
        elif o == "--data_rmax":
            mask_params["data_rmax"] = float(a)
        elif o in ("-n", "--negtative"):
            mask_params["mask_negative"] = True
        # optimization parameters
        elif o == "--model":
            opt_params["model"] = model_dict[a]
        elif o == "--optimizer":
            opt_params["optimizer"] = optimize_dict[a]
        elif o == "--hyperparameters":
            opt_params["hypers"] = parse_tuple_float(a)
        elif o == "--maxiter":
            opt_params["maxiter"] = int(a)
        elif o == "--tol":
            opt_params["tol"] = float(a)
        elif o in ("--input"):
            opt_params["input"] = a
        elif o in ("--dt_min"):
            opt_params["dt_min"] = a
        # other parameters
        elif o in ("-o", "--output"):
            output = a
        elif o == "--config":
            pass # handled before
        else:
            assert False, "unhandled option"

    # data
    data = list()
    data = solar.read_data(path, **data_params)
    data = solar.sort_data_array(data)
    # create object
    object_header = make_object_header(naxis, crpix, cdelt, crval)
    obj = fa.fitsarray_from_header(object_header)
    # configuration persistency
    out_header = persistency_header(obj.header, data_params,
                                       mask_params, opt_params)
    # pop optimization parameters
    model = opt_params.pop("model")
    optimizer = opt_params.pop("optimizer")
    hypers = opt_params.pop("hypers")
    if opt_params.has_key("input"):
        opt_params["x0"] = fa.FitsArray(file=opt_params["input"])
    # model
    P, D, obj_mask, data_mask = model(data, obj, **mask_params)
    # apply masking to data
    data *= (1 - data_mask)
    data[np.isnan(data)] = 0.
    # inversion
    b = data.ravel()
    exec("sol = lo." + optimizer + "(P, b, D, hypers, **opt_params)")
    # reshape result
    sol = fa.asfitsarray(sol.reshape(obj_mask.shape), header=out_header)
    sol.tofits(output)

def persistency_header(object_header, data_params, mask_params, opt_params):
    import fitsarray as fa
    # get full parameters dict for persistency
    full_params = dict(data_params, **mask_params)
    full_params.update(opt_params)
    full_params_str = dict()
    for k in full_params:
        full_params_str[k[:8]] = full_params[k].__str__()
    # save configuration to object header
    out_header = dict(object_header)
    out_header.update(full_params_str)
    out_header = fa.dict2header(out_header)
    return out_header

def parse_tuple(my_str):
    """
    Parse input parameters which can be tuples.
    """
    # remove any kind of parenthesis
    for c in (")", "]", "}"):
        my_str = my_str.rstrip(c)
    for c in ("(", "[", "{"):
        my_str = my_str.lstrip(c)
    # split tuple elements if any
    str_list = my_str.split(",")
    # remove trailing whitespaces
    str_list = [s.rstrip() for s in str_list]
    str_list = [s.lstrip() for s in str_list]
    return str_list

def parse_tuple_int(my_str):
    """
    Parse tuple and convert to int.
    """
    return [int(s) for s in parse_tuple(my_str)]

def parse_tuple_float(my_str):
    """
    Parse tuple and convert to float.
    """
    return [float(s) for s in parse_tuple(my_str)]

def make_object_header(naxis, crpix, cdelt, crval):
    header = dict()
    header["NAXIS"] = len(naxis)
    header["BITPIX"] = -64
    for i in xrange(len(naxis)):
        header["NAXIS" + str(i + 1)] = naxis[i]
        header["CRPIX" + str(i + 1)] = crpix[i]
        header["CDELT" + str(i + 1)] = cdelt[i]
        header["CRVAL" + str(i + 1)] = crval[i]
    return header

if __name__ == "__main__":
    main()
