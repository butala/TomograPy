/*
  C Siddon algorithm and its python wrapper. It performs 3D conic projection
  and backprojection for tomography applications.
*/

/*============================================================================*/
/* Header */

#include "Python.h"
#include "arrayobject.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <omp.h>

/* To avoid division by zero. */
#define INF 1000000 /* in solar radii*/
/* Dimension number of the problem. */
#define NDIM 3 /*number of dimensions*/
/* To allow for multiple data types through templating. */
#define CTYPE %(ctype)s

/* True if x is a NaN. */
#define isNaN(x) ((x) != (x))
/* Power of two. */
#define SQ(x) ((x) * (x))
/* Python array indexing. */
#define UINT_IND1(a, i) *((unsigned int *) PyArray_GETPTR1(a, i))
#define IND1(a, i) *((CTYPE *) PyArray_GETPTR1(a, i))
#define IND2(a, i) *((CTYPE *) PyArray_GETPTR2(a, i[0], i[1]))
#define IND3(a, i) *((CTYPE *) PyArray_GETPTR3(a, i[0], i[1], i[2]))
#define IND3t(a, i, j) *(CTYPE *)(a->data + i[0] * a->strides[0]	\
				  + i[1] * a->strides[1]		\
				  + i[2] * a->strides[2]		\
				  + j * a->strides[3])

#define IND4(a, i) *(CTYPE *)(a->data + i[0] * a->strides[0]	\
			      + i[1] * a->strides[1]		\
			      + i[2] * a->strides[2]		\
			      + i[3] * a->strides[3])

/*numpy 2.0 way :*/
/*
  #define IND3t(a, i, j) *((CTYPE *) PyArray_GETPTR4(a, i[0], i[1], i[2], j))
  #define IND4(a, i) *((CTYPE *) PyArray_GETPTR4(a, i[0], i[1], i[2], i[3]))
*/

typedef struct
{
  CTYPE p[NDIM];
  CTYPE d[NDIM];
  CTYPE min[NDIM];
  CTYPE max[NDIM];
}map_header;

typedef struct
{
  CTYPE s[NDIM];
  CTYPE p[NDIM];
  CTYPE M[NDIM];
  CTYPE R[NDIM][NDIM];
}image_header;

/*-----------------------------------------------------------------------*/
/* Functions declarations */
/* Python wrapper */
void init_C_siddon%(suffix)s(void);
static PyObject *call_full_projector%(suffix)s(PyObject *self, PyObject *args);
static PyObject *call_image_projector%(suffix)s(PyObject *self, PyObject *args);
static PyObject *call_ray_projector%(suffix)s(PyObject *self, PyObject *args);
/* image projection */
inline void image_projector(PyArrayObject * , PyArrayObject * , unsigned int , image_header *, map_header *);
/* Compute integration along one line of sight. */
inline void ray_projector(CTYPE[NDIM], CTYPE[NDIM], PyArrayObject*, unsigned int[NDIM], PyArrayObject*, map_header *);
/* get the steps between each kind of intersection. */
/* map, u0, p*/
inline void get_intersection_steps(map_header *, CTYPE[NDIM], CTYPE [NDIM]);
/* get the absolution value of the steps constantly required in the inner loop.*/
/*p, pabs*/
inline void get_pabs(CTYPE[NDIM], CTYPE[NDIM]);
/* get the line of sight parameters corresponding to the intersection with the map*/
/* map, M, u0, a1, an */
inline void get_intersection_parameters(map_header * , CTYPE [NDIM], CTYPE [NDIM], CTYPE [NDIM], CTYPE [NDIM]);
/* Check if line of sight goes through the map cube. */
/* M, u0, a1, an, &amin, &amax */
inline void intersect_map(CTYPE [NDIM], CTYPE [NDIM], CTYPE [NDIM], CTYPE [NDIM], CTYPE *, CTYPE *);
/* get the value to add to voxel index to update*/
/* u0, update*/
inline void get_update(CTYPE [NDIM], int [NDIM]);
/*initial voxel index*/
/* RoiO, M, u0, amin, iv */
inline void get_voxel_index(map_header *, CTYPE [NDIM], CTYPE [NDIM], CTYPE, int [NDIM]);
/* next voxel index*/
/* update, iv, next */
inline void get_next_voxel_index(unsigned int [NDIM], int [NDIM], int [NDIM], unsigned int [NDIM]);
/* distance to next intersection */
/* next, p, a1, amin, D */
inline void get_intersection_distance(unsigned int [NDIM], CTYPE [NDIM], CTYPE [NDIM], CTYPE, CTYPE[NDIM]);
/* Update voxel index and perform pj or bpj. */
inline void voxel(PyArrayObject*, unsigned int[NDIM], PyArrayObject*, int[NDIM], CTYPE[NDIM], CTYPE *, CTYPE[NDIM], int[NDIM]);
/* projection / backprojection of a voxel. */
inline void pj(PyArrayObject*, unsigned int[NDIM], PyArrayObject*, int[NDIM], CTYPE);
inline void bpj(PyArrayObject*, unsigned int[NDIM], PyArrayObject*,  int[NDIM], CTYPE);
/* projection / backprojection with temporal index */
inline void pjt(PyArrayObject*, unsigned int[NDIM], PyArrayObject*, int[NDIM], CTYPE);
inline void bpjt(PyArrayObject*, unsigned int[NDIM], PyArrayObject*, int[NDIM], CTYPE);
/* Check if voxel index is inside the cube. */
inline int in_map(unsigned int [NDIM], int[NDIM]);
/* Check if voxel index is outside a sphere of radius 1. */
inline int sun(CTYPE[NDIM], CTYPE[NDIM], CTYPE);
/* Returns always 1. (replace sun if no sun obsactle is required. */
inline int none(CTYPE[NDIM], CTYPE[NDIM], CTYPE);
/* Minimum or maximum of 3 values. */
inline CTYPE min3(CTYPE, CTYPE, CTYPE);
inline CTYPE max3(CTYPE, CTYPE, CTYPE);
/* Returns 1 if input is positive, -1 if negative and 0 if input equal 0. */
inline int sign(CTYPE);
/* Output 2 values after sorting 2 input values. */
inline void compare(CTYPE*, CTYPE*, CTYPE, CTYPE);
/* Define unit vector from spherical coordinates. */
inline void define_unit_vector(CTYPE, CTYPE, CTYPE[NDIM]);
/* Apply a rotation matrix to a vector */
inline void apply_rotation(CTYPE[NDIM][NDIM] , CTYPE[NDIM], CTYPE[NDIM]);
/* Comupte the distance from the map cube reference pixel (center). */
inline CTYPE distance_to_center(CTYPE[NDIM], CTYPE[NDIM], CTYPE);
/* Perform projection / backprojection of an image set. */
inline static PyObject * full_projector(PyArrayObject*, PyArrayObject*);
/* to get a dict value and recast it into CTYPE*/
inline CTYPE get_dict_ctype(PyObject * , char [8]);
inline void PyDict_AsMapHeader(PyObject * , map_header *);
inline void PyDict_AsImageHeader(PyObject * , image_header *);

/*============================================================================*/
/* Functions code */

/* Python methods declaration */

static PyMethodDef _C_siddon%(suffix)sMethods[] = {
  {"full_projector", call_full_projector%(suffix)s, METH_VARARGS},
  {"image_projector", call_image_projector%(suffix)s, METH_VARARGS},
  {"ray_projector", call_ray_projector%(suffix)s, METH_VARARGS},
  {NULL, NULL}     /* Sentinel - marks the end of this structure */
};

void init_C_siddon%(suffix)s()  {
  (void) Py_InitModule("_C_siddon%(suffix)s", _C_siddon%(suffix)sMethods);
  import_array();  // Must be present for NumPy.  Called first after above line.
  Py_Initialize();
}

/* Wrappers code */

static PyObject *call_full_projector%(suffix)s(PyObject *self, PyObject *args)
{
  /* Input and output matrices to be extracted from args */
  PyArrayObject *data, *map;

  /* Parse tuples separately since args will differ between C fcns */
  if (!PyArg_ParseTuple(args, "O!O!", &PyArray_Type, &data,
			&PyArray_Type, &map))
    return NULL;
  /*Raise errors if input matrix is missing*/
  if (NULL == data)
    return NULL;
  if (NULL == map)
    return NULL;

  /* Siddon for each time index */
  return full_projector(data, map);
}

static PyObject *call_image_projector%(suffix)s(PyObject *self, PyObject *args)
{
  /* Input and output matrices to be extracted from args */
  PyArrayObject *data, *map;
  PyObject * headers, * py_image_header, * py_map_header;
  unsigned int t=0;
  map_header mh;
  image_header ih;
  /* Parse tuples separately since args will differ between C fcns */
  if (!PyArg_ParseTuple(args, "O!O!i", &PyArray_Type, &data,
			&PyArray_Type, &map, &t))
    return NULL;
  /*Raise errors if input matrix is missing*/
  if (NULL == data)
    return NULL;
  if (NULL == map)
    return NULL;

  /* Get data header */
  headers = NULL;
  headers = PyObject_GetAttrString((PyObject*)data, "header");
  if (NULL == headers)
    return NULL;

  py_image_header = PyList_GetItem(headers, t);
  PyDict_AsImageHeader(py_image_header, &ih);

  /* get map header */
  py_map_header = (PyObject*) PyObject_GetAttrString((PyObject*)map, "header");
  PyDict_AsMapHeader(py_map_header, &mh);

  /* Siddon for each time index */
  image_projector(data, map, t, &ih, &mh);
  Py_RETURN_NONE;
}

static PyObject *call_ray_projector%(suffix)s(PyObject *self, PyObject *args)
{
  /* Input and output matrices to be extracted from args */
  PyArrayObject *data, *map, *py_id;
  PyObject * headers, * py_image_header, * py_map_header;
  unsigned int k;
  unsigned int id[NDIM] = {0, 0, 0};
  map_header mh;
  image_header ih;
  CTYPE lambda, gamma;
  CTYPE u0[NDIM], u2[NDIM];
  /* Parse tuples separately since args will differ between C fcns */
  if (!PyArg_ParseTuple(args, "O!O!O!", &PyArray_Type, &data,
			&PyArray_Type, &map, &PyArray_Type, &py_id))
    return NULL;
  /*Raise errors if input matrix is missing*/
  if (NULL == data)
    return NULL;
  if (NULL == map)
    return NULL;
  if (NULL == py_id)
    return NULL;

  /* get detector index */
  for(k = 0; k < NDIM; k++)
    id[k] = UINT_IND1(py_id, k);

  /* Get data header */
  headers = NULL;
  headers = PyObject_GetAttrString((PyObject*)data, "header");
  if (NULL == headers)
    return NULL;

  py_image_header = PyList_GetItem(headers, id[2]);
  PyDict_AsImageHeader(py_image_header, &ih);

  /* get map header */
  py_map_header = (PyObject*) PyObject_GetAttrString((PyObject*)map, "header");
  PyDict_AsMapHeader(py_map_header, &mh);

  gamma = (id[0] - ih.s[0]) * ih.p[0];
  lambda = (id[1] - ih.s[1]) * ih.p[1];
  define_unit_vector(lambda, gamma, u2);
  apply_rotation(ih.R, u2, u0);
  ray_projector(ih.M, u0, data, id, map, &mh);
  Py_RETURN_NONE;
}

/* C functions */

static PyObject * full_projector(PyArrayObject * data, PyArrayObject * map)
{
  /* declarations */
  PyObject * py_map_header, *headers, *py_image_header;
  /* c map header*/
  map_header mh;
  image_header * ih_array;

  /* loop incremented integers*/
  int t;
  /* Get data header */
  headers = NULL;
  headers = PyObject_GetAttrString((PyObject*)data, "header");
  if (NULL == headers)
    return NULL;

  /* allocate memory for array of image_headers*/
  ih_array = (image_header*) malloc(data->dimensions[2] * sizeof(image_header));
  for( t = 0 ; t < data->dimensions[2] ; t++)
  {
    py_image_header = PyList_GetItem(headers, t);
    PyDict_AsImageHeader(py_image_header, &ih_array[t]);
  }

  /* get map header */
  py_map_header = (PyObject*) PyObject_GetAttrString((PyObject*)map, "header");
  PyDict_AsMapHeader(py_map_header, &mh);
  /* Loop on the time / image dimension */
  Py_BEGIN_ALLOW_THREADS
  #pragma omp parallel default (shared) private(t)
  #pragma omp for
  for(t = 0 ; t < data->dimensions[2] ; t++){
    image_projector(data, map, t, &ih_array[t], &mh);
  }
  Py_END_ALLOW_THREADS
  free(ih_array);
  Py_RETURN_NONE;
}

void image_projector(PyArrayObject * data, PyArrayObject *  map, unsigned int t, image_header * ih, map_header * ch)
{
  unsigned int id[NDIM];
  CTYPE lambda, gamma;
  /* normalized direction vector in image referentiel */
  CTYPE u2[NDIM];
  /* in solar referentiel */
  CTYPE u0[NDIM];

  unsigned int n1 = (unsigned int)data->dimensions[0];
  unsigned int n2 = (unsigned int)data->dimensions[1];
  
  id[2] = t;

  /* loops on angles (detectors pixels) */
  for(id[0] = 0 ; id[0] < n1 ; id[0]++)
  {
    gamma = (id[0] - ih->s[0]) * ih->p[0];
    for(id[1] = 0 ; id[1] < n2 ; id[1]++)
    {
      /* skip computation if the value is a NaN */
      if((isNaN(IND3(data, id)) == 0))
      {
	lambda = (id[1] - ih->s[1]) * ih->p[1];
	define_unit_vector(lambda, gamma, u2);
	apply_rotation(ih->R, u2, u0);
	ray_projector(ih->M, u0, data, id, map, ch);
      }
    }
  }
}

void ray_projector(CTYPE M[NDIM],
		   CTYPE u0[NDIM],
		   PyArrayObject * data,
		   unsigned int id[NDIM],
		   PyArrayObject * map,
		   map_header * ch)
{
  /* distance of the current voxel to the detector   */
  CTYPE ac; 
  /* array containing the distances to the 6 faces of the volume*/
  CTYPE a1[NDIM], an[NDIM];
  /* minimum of the distance array and it subscript */
  CTYPE amin=0, amax=0;
  /* subscripts of the current voxel */
  int iv[NDIM];
  /* distances to the next intersection with a x,y or z constant
     plan of the grid */
  CTYPE p[NDIM], pabs[NDIM];
  /* current distances to the next intersection with a x,y or z 
     constant plan of the grid */
  CTYPE D[NDIM];
  /* to discriminate between increasing and decreasing of voxel 
     subscripts*/
  int update[NDIM];
  unsigned int next[NDIM];
  unsigned int n[NDIM];

  n[0] = map->dimensions[0];
  n[1] = map->dimensions[1];
  n[2] = map->dimensions[2];

  get_intersection_parameters(ch, M, u0, a1, an);
  intersect_map(M, u0, a1, an, &amin, &amax);
  /* otherwise the ray does not go through the map */
  if(amin < amax)
  {
    /* loop initilization */
    get_intersection_steps(ch, u0, p);
    get_pabs(p, pabs);
    get_update(u0, update);
    get_voxel_index(ch, M, u0, amin, iv);
    get_next_voxel_index(n, update, iv, next);
    get_intersection_distance(next, p, a1, amin, D);
    ac = amin;
    /* check if still into the map and did not reached the obstacles */
    while(in_map(n, iv) && %(obstacle)s(M, u0, ac))
    {
      voxel(data, id, map, iv, D, &ac, pabs, update);
    }
  }
}

void get_intersection_parameters(map_header * ch, CTYPE M[NDIM], CTYPE u0[NDIM], CTYPE a1[NDIM], CTYPE an[NDIM])
{
  unsigned int k;
  for(k = 0 ; k < NDIM ; k++)
  {
    if(u0[k] != 0){
      a1[k] = (ch->min[k] - M[k]) / u0[k];
      an[k] = (ch->max[k] - M[k]) / u0[k];}
    else{
      a1[k] = - INF;
      an[k] = INF;}
  }
}

void intersect_map(CTYPE M[NDIM], CTYPE u0[NDIM], CTYPE a1[NDIM], CTYPE an[NDIM], CTYPE * pamin, CTYPE * pamax)
{
  unsigned int k;
  /* intersections avec les differentes faces */
  CTYPE Imin[NDIM], Imax[NDIM];
  /* impact point determination */
  for(k = 0 ; k < NDIM ; k++)
    compare(&Imin[k], &Imax[k], a1[k], an[k]);

  *pamin = max3(Imin[0], Imin[1], Imin[2]);
  *pamax = min3(Imax[0], Imax[1], Imax[2]);
}

void get_intersection_steps(map_header * ch, CTYPE u0[NDIM], CTYPE p[NDIM])
{
  unsigned int k;
  for(k = 0 ; k < NDIM ; k++)
  {
    if(u0[k] != 0)
      p[k] = ch->p[k] / u0[k];
    else
      p[k] = INF;
  }
}

void get_pabs(CTYPE p[NDIM], CTYPE pabs[NDIM])
{
  unsigned int k;
  for(k = 0; k < NDIM ; k++)
    pabs[k] = fabs(p[k]);
}

void get_update(CTYPE u0[NDIM], int update [NDIM])
{
  unsigned int k;
  for(k = 0; k < NDIM ; k++)
    update[k] = sign(u0[k]);    
}

void get_voxel_index(map_header * ch, CTYPE M[NDIM], CTYPE u0[NDIM], CTYPE amin, int iv[NDIM])
{
  unsigned int k;
  CTYPE e[NDIM];
  for (k = 0; k < NDIM; k++)
  {
    e[k] = M[k] + amin * u0[k];
    iv[k] = (unsigned int)( (e[k] - ch->min[k]) / ch->p[k]);
    iv[k] -= (unsigned int)( (e[k] - ch->min[k]) / ch->d[k]);
  }    
}

void get_next_voxel_index(unsigned int n[NDIM], int update[NDIM], int iv[NDIM], unsigned int next[NDIM])
{
  unsigned int k;
  for(k = 0 ; k < NDIM ; k++)
  {
    if(update[k] == 1)
      next[k] = iv[k] + 1;
    else if(update[k] == -1)
      next[k] = iv[k];
    else
      next[k] = INF * n[k];
  }
}

void get_intersection_distance(unsigned int next[NDIM], CTYPE p[NDIM], CTYPE a1[NDIM], CTYPE amin, CTYPE D[NDIM])
{
  unsigned int k;
  for(k = 0; k < NDIM ; k++)
    D[k] = ((CTYPE) next[k]) * p[k] + a1[k] - amin;
}

void voxel(PyArrayObject * data,
	   unsigned int id[NDIM],
	   PyArrayObject * map,
	   int iv[NDIM],
	   CTYPE D[NDIM],
	   CTYPE * pac,
	   CTYPE pabs[NDIM],
	   int update[NDIM])
{
  /* check along which dimension is the current intersection */
  if((D[0] < D[1]) && (D[0] < D[2]))
  {
    *pac += D[0];
    /* projection*/
    %(pj)s(data, id, map, iv, D[0]);
    /* update voxel subscript */
    iv[0] += update[0];
    /* update distances to next intersections*/
    D[1] -= D[0];
    D[2] -= D[0];
    D[0] = pabs[0];
  }
  else if((D[1] < D[0]) && (D[1] < D[2]))
  {
    *pac += D[1];
    /* projection */
    %(pj)s(data, id, map, iv, D[1]);
    /* update voxel subscript */
    iv[1] += update[1];
    /* update distances to next intersections*/
    D[0] -= D[1];
    D[2] -= D[1];
    D[1] = pabs[1];
  }
  else if((D[2] < D[0]) && (D[2] < D[1]))
  {
    *pac += D[2];
    /* projection */
    %(pj)s(data, id, map, iv, D[2]);
    /* update voxel subscript */
    iv[2] += update[2];
    /* update distances to next intersections*/
    D[0] -= D[2];
    D[1] -= D[2];
    D[2] = pabs[2];
  }
  /* case in which two directions need to be updated at the same time. */
  else if((D[0] == D[1]) && (D[0] < D[2]))
  {
    *pac += D[0];
    /* projection */
    %(pj)s(data, id, map, iv, D[0]);
    /* update voxel subscript */
    iv[0] += update[0];
    iv[1] += update[1];
    /* update distances to next intersections*/
    D[2] -= D[0];
    D[0] = pabs[0];
    D[1] = pabs[1];
  }
  else if((D[1] == D[2]) && (D[1] < D[0]))
  {
    *pac += D[1];
    /* projection */
    %(pj)s(data, id, map, iv, D[1]);
    /* update voxel subscript */
    iv[1] += update[1];
    iv[2] += update[2];
    /* update distances to next intersections*/
    D[0] -= D[1];
    D[1] = pabs[1];
    D[2] = pabs[2];
  }
  else if((D[0] == D[2]) && (D[0] < D[1]))
  {
    *pac += D[0];
    /* projection */
    %(pj)s(data, id, map, iv, D[0]);
    /* update voxel subscript */
    iv[0] += update[0];
    iv[2] += update[2];
    /* update distances to next intersections*/
    D[1] -= D[0];
    D[0] = pabs[0];
    D[2] = pabs[2];
  }
  /* finally all directions updated */
  else if((D[0] == D[1]) && (D[0] == D[2]))
  {
    *pac += D[0];
    /* projection */
    %(pj)s(data, id, map, iv, D[0]);
    /* update voxel subscript */
    iv[0] += update[0];
    iv[1] += update[1];
    iv[2] += update[2];
    /* update distances to next intersections*/
    D[0] = pabs[0];
    D[1] = pabs[1];
    D[2] = pabs[2];
  }
}

/* projection update */
void pj(PyArrayObject * data, unsigned int id[NDIM], PyArrayObject * map,
	int iv[NDIM], CTYPE d)
{
#pragma omp atomic
  IND3(data, id) += d * IND3(map, iv);
}

/* backprojection update*/
void bpj(PyArrayObject * data, unsigned int id[NDIM], PyArrayObject * map,
	 int iv[NDIM], CTYPE d)
{
#pragma omp atomic
  IND3(map, iv) += d * IND3(data, id);
}

/* projection with time */
void pjt(PyArrayObject * data, unsigned int id[NDIM], PyArrayObject * map,
	 int iv[NDIM], CTYPE d)
{
#pragma omp atomic
  IND3(data, id) += d * IND3t(map, iv, id[2]);
}

/* backprojection with time*/
void bpjt(PyArrayObject * data, unsigned int id[NDIM], PyArrayObject * map,
	  int iv[NDIM], CTYPE d)
{
#pragma omp atomic
  IND3t(map, iv, id[2]) += d * IND3(data, id);
}


/* check if still in map  */
int in_map(unsigned int n[NDIM], int iv[NDIM])
{
  return (iv[0] >= 0 && iv[0] < n[0]
	  && iv[1] >= 0 && iv[1] < n[1]
	  && iv[2] >= 0 && iv[2] < n[2]);
}

/* check if the ray has reached the sphere of radius 1 */
int sun(CTYPE M[NDIM], CTYPE u0[NDIM], CTYPE ac)
{
  CTYPE d;
  d = distance_to_center(M, u0, ac);
  return d > 1;
}

/* always true : replace sun if no sun obstacle is desired */
int none(CTYPE M[NDIM], CTYPE u0[NDIM], CTYPE ac)
{
  return 1;
}

CTYPE min3(CTYPE x, CTYPE y, CTYPE z)
{
  if ((x < y) && (x < z))
    return x;
  else if ((y <= x) && (y < z))
    return y;
  else
    return z;
}

CTYPE max3(CTYPE x, CTYPE y, CTYPE z)
{
  if ((x > y) && (x > z))
    return x;
  else if ((y >= x) && (y > z))
    return y;
  else
    return z;
}

int sign(CTYPE x)
{
  if (x>0)
    return 1;
  else if(x<0)
    return -1;
  else
    return 0;
}

void compare(CTYPE * pumin, CTYPE * pumax, CTYPE u1, CTYPE u2)
{
  if (u1 > u2)
  {
    (*pumin) = u2;
    (*pumax) = u1;
  }
  else
  {
    (*pumin) = u1;
    (*pumax) = u2;    
  }
}

void define_unit_vector(CTYPE lambda, CTYPE gamma, CTYPE u2[NDIM])
{
  u2[0] = cos(lambda) * cos(gamma);
  u2[1] = cos(lambda) * sin(gamma);
  u2[2] = sin(lambda);
}

void apply_rotation(CTYPE R[NDIM][NDIM], CTYPE u2[NDIM], CTYPE u0[NDIM])
{
  u0[0] = R[0][0] * u2[0] + R[0][1] * u2[1] + R[0][2] * u2[2];
  u0[1] = R[1][0] * u2[0] + R[1][1] * u2[1] + R[1][2] * u2[2];
  u0[2] = R[2][0] * u2[0] + R[2][1] * u2[1] + R[2][2] * u2[2];
}

CTYPE distance_to_center(CTYPE M[NDIM], CTYPE u0[NDIM], CTYPE ac)
{
  CTYPE d;
  d = SQ(M[0] + ac * u0[0]);
  d += SQ(M[1] + ac * u0[1]);
  d += SQ(M[2] + ac * u0[2]);
  return d;
}

/* Python to C conversion */

CTYPE get_dict_ctype(PyObject * dict, char key[8])
{
  PyObject * obj;
  obj = (PyObject*)PyDict_GetItemString(dict, key);
  return (CTYPE)PyFloat_AsDouble(obj);
}

void PyDict_AsMapHeader(PyObject * dict, map_header * ch)
{
  ch->p[0] = get_dict_ctype(dict, "CDELT1");
  ch->p[1] = get_dict_ctype(dict, "CDELT2");
  ch->p[2] = get_dict_ctype(dict, "CDELT3");

  ch->min[0] = get_dict_ctype(dict, "MMIN0");
  ch->min[1] = get_dict_ctype(dict, "MMIN1");
  ch->min[2] = get_dict_ctype(dict, "MMIN2");

  ch->max[0] = get_dict_ctype(dict, "MMAX0");
  ch->max[1] = get_dict_ctype(dict, "MMAX1");
  ch->max[2] = get_dict_ctype(dict, "MMAX2");

  ch->d[0] = get_dict_ctype(dict, "PSHAPE0");
  ch->d[1] = get_dict_ctype(dict, "PSHAPE1");
  ch->d[2] = get_dict_ctype(dict, "PSHAPE2");
}

void PyDict_AsImageHeader(PyObject * dict, image_header * ih)
{
  ih->s[0] = get_dict_ctype(dict, "CRPIX1");
  ih->s[1] = get_dict_ctype(dict, "CRPIX2");

  ih->p[0] = get_dict_ctype(dict, "CDELT1");
  ih->p[1] = get_dict_ctype(dict, "CDELT2");
 
  ih->R[0][0] = get_dict_ctype(dict, "R0_0");
  ih->R[0][1] = get_dict_ctype(dict, "R0_1");
  ih->R[0][2] = get_dict_ctype(dict, "R0_2");
  ih->R[1][0] = get_dict_ctype(dict, "R1_0");
  ih->R[1][1] = get_dict_ctype(dict, "R1_1");
  ih->R[1][2] = get_dict_ctype(dict, "R1_2");
  ih->R[2][0] = get_dict_ctype(dict, "R2_0");
  ih->R[2][1] = get_dict_ctype(dict, "R2_1");
  ih->R[2][2] = get_dict_ctype(dict, "R2_2");

  ih->M[0] = get_dict_ctype(dict, "M0");
  ih->M[1] = get_dict_ctype(dict, "M1");
  ih->M[2] = get_dict_ctype(dict, "M2");
}
